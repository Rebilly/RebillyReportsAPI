################################################################################
swagger: "2.0"
info:
  version: "0.1"
  title: "Rebilly Experimental Reports REST API"
  contact:
    name: "Rebilly API Support"
    url: "https://www.rebilly.com/contact/"
    email: "integrations@rebilly.com"
  license:
    name: "Rebilly"
    url: "https://my.rebilly.com/api/license/"
  termsOfService: "https://www.rebilly.com/terms/"
  x-logo:
    url: 'https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg'
    backgroundColor: '#0033A0'
################################################################################
host: "api.rebilly.com"
basePath: "/experimental"
schemes:
  - "https"
produces:
  - "application/json"
consumes:
  - "application/json"
################################################################################
tags:
  - name: Introduction
    description: |
      This API is experimental and likely to change.  We would appreciate
      feedback.

  - name: Authentication
    description: |
      When you sign up for an account, you are given your first API key.
      You can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future). You authenticate to the
      Rebilly API by providing your secret key in the request header.

      Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
      public key.
      - private key: authenticates each request by searching for the presence
      of an HTTP header: REB-APIKEY.
      - JWT: authenticates each request by the HTTP header: Authorization.
      - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

      Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
      the specific granular permissions and expiration for that JWT.  We call our resource
      for generating JWT [Sessions](#tag/Sessions).

      Rebilly also has a client-side authentication scheme that uses an
      apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
      that you may safely create tokens from the client-side without compromising
      your secret keys.

      Never share your secret keys. Keep them guarded and secure.
      The client-side authentication scheme uses one HTTP header named REB-AUTH.

  - name: Histograms
    description: |
      Histograms are for particular kinds of reports with cohorts and periods.
  - name: Reports
    description: |
      Retrieve summary information about your customers, subscriptions, transactions, and more.
  - name: Data Exports
    description: |
      Data exports.
  - name: Timelines
    description: |
      Timelines are holding various events that occurred in the app.
################################################################################
securityDefinitions:
  ApiKey:
    description: |
      When you sign up for an account, you are given your first API key.
      To do so please follow this link: https://www.rebilly.com/site/signup/
      Also you can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future).
    name: "REB-APIKEY"
    type: apiKey
    in: header
  JWT:
    description: |
      You can create a JSON Web Token (JWT) via our Sessions resource.
    type: basic
  RebAuth:
    description: |
      Only for the Tokens resource.
      The REB-AUTH value is created in this way
      Generate a Nonce (random string), and a Timestamp (unix timestamp)
      Concatenate the values of ApiUser, Nonce, and Timestamp (in that order).
      Use that value as the input data when you calculate the <a href="http://tools.ietf.org/html/rfc2104">HMAC-SHA1</a> with your secret key, called the signature.
      Forming the four data points into a JSON object.  {"REB-APIUSER":"abcdefg","REB-NONCE":"adfsjtreitou345fgkdafgj","REB-TIMESTAMP":"1382591345","REB-SIGNATURE":"a234fc95460401cfg09c9d09"}
      Then base64 encode that JSON object.  This is the final value of the REB-AUTH HTTP header
    name: "REB-AUTH"
    type: apiKey
    in: header
################################################################################
security:
  - ApiKey: []
################################################################################
responses:
  AccessForbidden:
    description: "Access forbidden, invalid API-KEY was used"
    schema:
      $ref: "#/definitions/Error"
  NotFound:
    description: "Resource was not found"
    schema:
      $ref: "#/definitions/Error"
  Conflict:
    description: "Conflict"
    schema:
      $ref: "#/definitions/Error"
  InvalidDataError:
    description: "Invalid data was sent"
    schema:
      $ref: "#/definitions/InvalidError"
  NoContent:
    description: "Request was accepted, but no response body is returned"
################################################################################
parameters:
  resourceId:
    name: id
    in: path
    description: The resource identifier string
    type: string
    required: true
  collectionLimit:
    name: limit
    in: query
    description: The collection items limit
    type: integer
    minimum: 0
    maximum: 1000
  collectionOffset:
    name: offset
    in: query
    description: The collection items offset
    type: integer
    minimum: 0
  reportTimezone:
    name: tz
    in: query
    description: Report's timezone offset in minutes
    type: integer
    minimum: -720
    maximum: 720
  collectionFilter:
    name: filter
    in: query
    type: string
    description: |
      The collection items filter requires a special format.
      Use "," for multiple allowed values.  Use ";" for multiple fields.
      See the filter guide for more options and examples about this format.
  collectionQuery:
    name: q
    in: query
    type: string
    description: The partial search of the text fields.
  collectionCriteria:
    name: criteria
    in: query
    type: string
    description: The json criteria for collection
  collectionSort:
    name: sort
    in: query
    type: string
    description: The collection items sort field and order (prefix with "-" for descending sort).
  collectionFields:
    name: fields
    in: query
    type: string
    description: Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.
  collectionExpand:
    name: expand
    in: query
    type: string
    description: Expand response to get full related object intead of ID.  See the expand guide for more info.
  mediaType:
    name: Accept
    in: header
    type: string
    enum:
      - application/json
      - text/csv
    default: application/json
    description: The response media type
  collectionEventTypes:
    name: eventTypes
    in: query
    type: array
    description: The event types
################################################################################
headers:
  Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    type: integer
  Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    type: integer
  Rate-Limit-Reset:
    description: |
      The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
      when the current period will reset
    type: string
  Pagination-Total:
    description: Total items count
    type: integer
  Pagination-Limit:
    description: Items per page limit
    type: integer
  Pagination-Offset:
    description: Pagination offset
    type: integer
